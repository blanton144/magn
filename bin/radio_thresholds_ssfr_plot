#!/usr/bin/env python
# encoding: utf-8


import os
import sys
import subprocess
import argparse
import matplotlib.pyplot as plt
import matplotlib.patches
import matplotlib
import fitsio
import numpy as np
import mnsa
import magn
import magn.midir
import magn.agn
import mnsa.mnsautils

matplotlib.rcParams['font.size'] = 26
matplotlib.rcParams['figure.figsize'] = [10., 7.]
matplotlib.rcParams['text.usetex'] = True


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Plot mid-IR AGN.')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.2',
                        help='MNSA configuration version')

    parser.add_argument('-o', '--old', dest='dr17',
                        required=False, help='dr17',
                        action='store_true',
                        default=False)

    args = parser.parse_args()
    version = args.version
    dr17 = args.dr17

    print("Reading data", flush=True)

    done = fitsio.read(os.path.join(os.getenv('MNSA_DATA'),
                                    '{v}.analysis', 'mnsa-done-{v}.fits').format(v=version))
    drpall = fitsio.read(os.path.join(os.getenv('MNSA_DATA'),
                                      '{v}', 'manga', 'redux', '{v}',
                                      'drpall-{v}.fits').format(v=version))

    agnfile = os.path.join(os.getenv('MNSA_DATA'),
                           version + '.analysis', 'agn',
                           'radio', 'VAC.fits')
    agnfile = agnfile.format(v=version)
    agn = fitsio.read(agnfile)

    good = agn['vel_disp_ssp_cen'] > 60.
    agn = agn[good]

    log_sfr = agn['log_sfr_ssp']
    log_mass = agn['log_Mass']
    log_ssfr = log_sfr - log_mass

    vdisp = agn['vel_disp_ssp_cen']
    
    log_mbh = magn.agn.vdisp_to_logmbh(vdisp=vdisp)
    log_ledd = magn.agn.logmbh_to_logledd(logmbh=log_mbh)

    iradio = np.where(agn['log_Lr'] > 0)[0] 
    iupper = np.where((agn['log_Lr'] < 0) & (agn['nsa_redshift'] > 0))[0]
    
    loglr_radio = agn['log_Lr'][iradio]
    logsfr_radio = log_sfr[iradio]
    logssfr_radio = log_ssfr[iradio]
    
    isagn = (((logsfr_radio < 0) & (loglr_radio > 38.6)) |
             ((logsfr_radio > 0) & (loglr_radio > 38.6 + logsfr_radio)))

    loglr_agn = loglr_radio[isagn]
    logssfr_agn = logssfr_radio[isagn]
    logbolo_agn = 0.925 * loglr_agn + 7.1 + np.log10(20.)
    logeddrat_agn = logbolo_agn - log_ledd[iradio[isagn]]

    islow = ((logsfr_radio < 0) & (loglr_radio < 38.6))
    logssfr_low_threshold = logssfr_radio[islow]
    loglr_low_threshold = loglr_radio[islow]
    logbolo_low_threshold = 0.925 * loglr_low_threshold + 7.1 + np.log10(20.)
    logeddrat_low_threshold = logbolo_low_threshold - log_ledd[iradio[islow]]

    ishigh = ((logsfr_radio > 0) & (loglr_radio < 38.6 + logsfr_radio))
    logssfr_high_threshold = logssfr_radio[ishigh]
    loglr_high_threshold = loglr_radio[ishigh]
    logbolo_high_threshold = 0.925 * loglr_high_threshold + 7.1 + np.log10(20.)
    logeddrat_high_threshold = logbolo_high_threshold - log_ledd[iradio[ishigh]]
    
    # values for radio non-detections
    log_flimit = np.log10(1.4 * 2.5) + 9. - 3. - 23.# flux limit in erg/cm^2/s
    logsfr_upper = log_sfr[iupper]
    logssfr_upper = log_ssfr[iupper]
    logterm = mnsa.mnsautils.log_flux_to_luminosity(agn['nsa_redshift'][iupper]) + 17.
    loglr_upper = log_flimit + logterm
    logsfr_nondet_threshold = logsfr_upper
    logssfr_nondet_threshold = logssfr_upper
    loglr_nondet_threshold = loglr_upper
    isbelow = ((logsfr_nondet_threshold < 0) & (loglr_nondet_threshold < 38.6)) 
    loglr_nondet_threshold[isbelow] = 38.6
    isbelow = ((logsfr_nondet_threshold > 0) & (loglr_nondet_threshold < 38.6 + logsfr_nondet_threshold)) 
    loglr_nondet_threshold[isbelow] = 38.6 + logsfr_nondet_threshold[isbelow]
    logbolo_nondet_threshold = 0.925 * loglr_nondet_threshold + 7.1 + np.log10(20.)
    logeddrat_nondet_threshold = logbolo_nondet_threshold - log_ledd[iupper]

    print("Plotting", flush=True)

    fig, ax = plt.subplots()

    ax.errorbar(logssfr_nondet_threshold, logeddrat_nondet_threshold,
                yerr=np.ones(len(logssfr_nondet_threshold)) * 0.3,
                uplims=np.ones(len(logssfr_nondet_threshold)),
                xerr=0.04, linestyle='none', marker='.', markersize=1, alpha=0.15,
                linewidth=1, color='black', zorder=1,
                label=r'{\rm Radio AGN Detection Thresholds}')

    ax.errorbar(logssfr_low_threshold, logeddrat_low_threshold,
                yerr=np.ones(len(logssfr_low_threshold)) * 0.3,
                uplims=np.ones(len(logssfr_low_threshold)),
                xerr=0.04, linestyle='none', marker='.', markersize=1, alpha=0.15,
                linewidth=1, color='black', zorder=1)

    ax.errorbar(logssfr_high_threshold, logeddrat_high_threshold,
                yerr=np.ones(len(logssfr_high_threshold)) * 0.3,
                uplims=np.ones(len(logssfr_high_threshold)),
                xerr=0.04, linestyle='none', marker='.', markersize=1, alpha=0.15,
                linewidth=1, color='black', zorder=1)
    
    ax.scatter(logssfr_agn, logeddrat_agn, alpha=1.0, color='red', s=40,
               zorder=2, label=r'{\rm Radio AGN Detections}')
    ax.set_xlabel(r'$\log_{10} {\rm~sSFR~(yr}^{-1}{\rm )}$')
    ax.set_ylabel(r'$\log_{10} \lambda~{\rm (Radio-based)}$')

    ax.set_xlim([-13.8, -9.3])
    ax.set_ylim([-5.7, 0.9])

    ax.legend()

    plt.tight_layout()

    pngfile = os.path.join(os.getenv('MNSA_DATA'),
                           version + '.analysis', 'agn',
                           'radio', 'radio-thresholds-ssfr-{v}.png')
    pngfile = pngfile.format(v=version)
    plt.savefig(pngfile, dpi=150)
    subprocess.run(['convert', pngfile, '-trim', pngfile])
