#!/usr/bin/env python
# encoding: utf-8


import os
import sys
import argparse
import matplotlib.pyplot as plt
import fitsio
import numpy as np
import mnsa
import magn
import magn.defaults
import magn.jiyan
import mnsa.mnsautils


def plot_o3_threshold(redshift=None, cf=None, cf_ivar=None, agn_ratios=None):
    """Plot path in P1-P3 space

    Parameters
    ----------

    redshift : np.float32
        redshift of galaxy

    cf : dict of ndarray of np.float32
        fluxes for each line (1-element arrays)

    cf_ivar : dict of ndarray of np.float32
        inverse variance of fluxes for each line (1-element arrays)

    agn_ratios : dict of ndarray of np.float32
        ratios of lines relative to [OIII] for typical AGN

    Notes
    -----

    cf and agn_ratios must have the keys 'NII-6585', 'SII-6718+6732',
    'SII-67I8', 'SII-6732', 'OIII-5008', 'Ha-6564', and 'Hb-4862'

    cf_ivar must have the keys 'NII-6585', 'SII-67I8', 'SII-6732',
    'OIII-5008', 'Ha-6564', and 'Hb-4862'
"""
    o3s = 35 + 10. * np.arange(1000) / 1000.
    test_detected = np.zeros(len(o3s), dtype=bool)
    test_isagn = np.zeros(len(o3s), dtype=bool)
    test_p1 = np.zeros(len(o3s), dtype=np.float32)
    test_p2 = np.zeros(len(o3s), dtype=np.float32)
    test_p3 = np.zeros(len(o3s), dtype=np.float32)
    for i, o3 in enumerate(o3s):
        tmp_detected, tmp_isagn, tmp_p1, tmp_p2, tmp_p3 = magn.jiyan.would_be_agn(redshift=redshift, cf=cf, cf_ivar=cf_ivar, agn_ratios=agn_ratios, nsigma=nsigma, log_luminosity_o3=o3, p1_threshold=p1_threshold, p3_threshold=p3_threshold)
        test_detected[i] = tmp_detected
        test_isagn[i] = tmp_isagn
        test_p1[i] = tmp_p1
        test_p2[i] = tmp_p2
        test_p3[i] = tmp_p3

    plt.plot(test_p1[test_detected], test_p3[test_detected], linewidth=2, color='black')
    plt.plot(test_p1[test_isagn], test_p3[test_isagn], linewidth=4, color='red')

    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Select Ji and Yan-style AGN.')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.2',
                        help='MNSA configuration version')

    parser.add_argument('-d', '--debug', dest='debug',
                        action='store_true', default=False,
                        help='debugging plots')

    parser.add_argument('-p', '--plateifu', dest='plateifu',
                        type=str, default=None, required=False,
                        help='debug this plate ifu')

    parser.add_argument('-n', '--nsigma', dest='nsigma',
                        type=np.float32, default=magn.defaults.nsigma, required=False)

    parser.add_argument('-1', '--p1-threshold', dest='p1_threshold',
                        type=np.float32, default=magn.defaults.p1_threshold, required=False)

    parser.add_argument('-3', '--p3-threshold', dest='p3_threshold',
                        type=np.float32, default=magn.defaults.p3_threshold, required=False)

    parser.add_argument('-o', '--old', dest='dr17',
                        required=False, help='dr17',
                        action='store_true',
                        default=False)

    parser.add_argument('-t', '--test', dest='test',
                        type=str, default=None, required=False,
                        help='test name')

    parser.add_argument('-A', '--alt-name', dest='altname',
                        type=str, default='',
                        help='alternative dir postfix')

    args = parser.parse_args()
    version = args.version
    debug = args.debug
    dr17 = args.dr17
    plateifu = args.plateifu
    nsigma = args.nsigma
    p1_threshold = args.p1_threshold
    p3_threshold = args.p3_threshold
    altname = args.altname
    test = args.test

    done = fitsio.read(os.path.join(os.getenv('MNSA_DATA'),
                                    '{v}.analysis', 'mnsa-done-{v}.fits').format(v=version))
    drpall = fitsio.read(os.path.join(os.getenv('MNSA_DATA'),
                                      '{v}', 'manga', 'redux', '{v}',
                                      'drpall-{v}.fits').format(v=version))

    cf, cf_ivar, cf_nbad, good = magn.jiyan.read_central_flux(version=version,
                                                              dr17=dr17)

    detected, isagn, lines = magn.jiyan.select_agn(cf=cf, cf_ivar=cf_ivar, good=good,
                                                   nsigma=nsigma, p1_threshold=p1_threshold,
                                                   p3_threshold=p3_threshold)

    default_detected, default_isagn, default_lines = magn.jiyan.select_agn(cf=cf,
                                                                           cf_ivar=cf_ivar,
                                                                           good=good,
                                                                           nsigma=magn.defaults.nsigma,
                                                                           p1_threshold=magn.defaults.p1_threshold,
                                                                           p3_threshold=magn.defaults.p3_threshold)

    # Find our AGN
    iagn = np.where(isagn)[0]
    default_iagn = np.where(default_isagn)[0]

    # Determine fluxes
    logterm = mnsa.mnsautils.log_flux_to_luminosity(redshift=drpall['z'][iagn])
    log_agn_flux_o3 = np.log10(lines['o3'][iagn])
    log_agn_luminosity_o3 = log_agn_flux_o3 + logterm
    log_agn_flux_o3_corr = np.log10(lines['o3_corr'][iagn])
    log_agn_luminosity_o3_corr = log_agn_flux_o3_corr + logterm
    log_agn_flux_hb = np.log10(lines['hb'][iagn])
    log_agn_luminosity_hb = log_agn_flux_hb + logterm
    log_agn_flux_hb_corr = np.log10(lines['hb_corr'][iagn])
    log_agn_luminosity_hb_corr = log_agn_flux_hb_corr + logterm

    # Find typical line ratios relative to OIII---use default AGN
    # definition for consistency across analyses!
    n2o3 = cf['NII-6585'][default_iagn] / cf['OIII-5008'][default_iagn]
    s2ao3 = cf['SII-6718'][default_iagn] / cf['OIII-5008'][default_iagn]
    s2bo3 = cf['SII-6732'][default_iagn] / cf['OIII-5008'][default_iagn]
    hao3 = cf['Ha-6564'][default_iagn] / cf['OIII-5008'][default_iagn]
    hbo3 = cf['Hb-4862'][default_iagn] / cf['OIII-5008'][default_iagn]

    agn_ratios = dict()
    agn_ratios['OIII-5008'] = 1.
    agn_ratios['NII-6585'] = np.median(n2o3)
    agn_ratios['SII-6718'] = np.median(s2ao3)
    agn_ratios['SII-6732'] = np.median(s2bo3)
    agn_ratios['SII-6718+6732'] = agn_ratios['SII-6718'] + agn_ratios['SII-6732']
    agn_ratios['Ha-6564'] = np.median(hao3)
    agn_ratios['Hb-4862'] = np.median(hbo3)
    agn_ratios['n2ha'] = np.log10(agn_ratios['NII-6585'] / agn_ratios['Ha-6564'])
    agn_ratios['s2ha'] = np.log10(agn_ratios['SII-6718+6732'] / agn_ratios['Ha-6564'])
    agn_ratios['o3hb'] = np.log10(agn_ratios['OIII-5008'] / agn_ratios['Hb-4862'])
    agn_ratios['o3ha'] = np.log10(agn_ratios['OIII-5008'] / agn_ratios['Ha-6564'])
    agn_ratios['o3_dust_correction'] = np.median(default_lines['o3_dust_correction'][default_iagn])
    agn_ratios['ha_dust_correction'] = np.median(default_lines['ha_dust_correction'][default_iagn])
    agn_ratios['hb_dust_correction'] = np.median(default_lines['hb_dust_correction'][default_iagn])

    agn_p1, agn_p2, agn_p3 = magn.jiyan.ratios_to_pspace(n2ha=agn_ratios['n2ha'],
                                                         s2ha=agn_ratios['s2ha'],
                                                         o3hb=agn_ratios['o3hb'])
    agn_ratios['p1'] = agn_p1
    agn_ratios['p2'] = agn_p2
    agn_ratios['p3'] = agn_p3

    # For non-identified AGN, determine the threshold [OIII] luminosity at
    # which this object would have been identified as an AGN. The "limit" is
    # just the actual [OIII] luminosity or the n-sigma upper limit on it.
    # The "threshold" is how bright an AGN would have to be to be detected.
    ilimit = np.where((good) & (isagn == False))[0]
    log_agn_luminosity_o3_threshold = np.zeros(len(done), dtype=np.float32) - 9999.
    log_agn_luminosity_hb_threshold = np.zeros(len(done), dtype=np.float32) - 9999.
    log_agn_luminosity_ha_threshold = np.zeros(len(done), dtype=np.float32) - 9999.
    log_agn_luminosity_o3_corr_threshold = np.zeros(len(done), dtype=np.float32) - 9999.
    log_agn_luminosity_hb_corr_threshold = np.zeros(len(done), dtype=np.float32) - 9999.
    log_agn_luminosity_ha_corr_threshold = np.zeros(len(done), dtype=np.float32) - 9999.
    for i in ilimit:

        # Now calculate the threshold
        ccf = dict()
        for k in cf:
            ccf[k] = cf[k][i:i + 1]
        ccf_ivar = dict()
        for k in cf_ivar:
            ccf_ivar[k] = cf_ivar[k][i:i + 1]

        tmp_o3, tmp_ha, tmp_hb = magn.jiyan.find_o3_threshold(redshift=drpall['z'][i:i + 1],
                                                              cf=ccf,
                                                              cf_ivar=ccf_ivar,
                                                              agn_ratios=agn_ratios,
                                                              nsigma=nsigma,
                                                              p1_threshold=p1_threshold,
                                                              p3_threshold=p3_threshold)
        log_agn_luminosity_o3_threshold[i] = tmp_o3
        log_agn_luminosity_hb_threshold[i] = tmp_hb
        log_agn_luminosity_ha_threshold[i] = tmp_ha
        if(lines['o3_dust_correction'][i] == -9999.):
            log_agn_luminosity_o3_corr_threshold[i] = tmp_o3 + np.log10(agn_ratios['o3_dust_correction'])
            log_agn_luminosity_hb_corr_threshold[i] = tmp_hb + np.log10(agn_ratios['hb_dust_correction'])
            log_agn_luminosity_ha_corr_threshold[i] = tmp_ha + np.log10(agn_ratios['ha_dust_correction'])
        else:
            log_agn_luminosity_o3_corr_threshold[i] = tmp_o3 + np.log10(lines['o3_dust_correction'][i])
            log_agn_luminosity_hb_corr_threshold[i] = tmp_hb + np.log10(lines['hb_dust_correction'][i])
            log_agn_luminosity_ha_corr_threshold[i] = tmp_ha + np.log10(lines['ha_dust_correction'][i])
        
        # Some debugging plots
        if(debug & ((plateifu is None) |
                    (plateifu == drpall['plateifu'][i]))):
            plt.scatter(lines['p1'][detected], lines['p3'][detected], s=1, color='grey')
            plot_o3_threshold(redshift=drpall['z'][i:i + 1],
                              cf=ccf, cf_ivar=ccf_ivar,
                              agn_ratios=agn_ratios)
            xmin = - 1.25
            xmax = 0.9
            ymin = - 0.3
            ymax = 1.35
            plt.xlim([xmin, xmax])
            plt.ylim([ymin, ymax])
            logterm = mnsa.mnsautils.log_flux_to_luminosity(redshift=drpall['z'][i])
            ol = np.log10(cf['OIII-5008'][i]) + logterm
            plt.title('ol={ol} logl={logl}'.format(ol=ol,
                                                   logl=log_agn_luminosity_o3_threshold[i]))
            plt.savefig('debug.png')

            sys.exit()

    agn_dtype = np.dtype([('plateifu', str, 20),
                          ('z', np.float32),
                          ('isagn', bool),
                          ('good', bool),
                          ('detected', bool),
                          ('p1', np.float32),
                          ('p1_err', np.float32),
                          ('p2', np.float32),
                          ('p2_err', np.float32),
                          ('p3', np.float32),
                          ('p3_err', np.float32),
                          ('o3', np.float32),
                          ('o3_err', np.float32),
                          ('n2ha', np.float32),
                          ('n2ha_err', np.float32),
                          ('s2ha', np.float32),
                          ('s2ha_err', np.float32),
                          ('o3hb', np.float32),
                          ('o3hb_err', np.float32),
                          ('hahb', np.float32),
                          ('hahb_err', np.float32),
                          ('hahb_av', np.float32),
                          ('o3_dust_correction', np.float32),
                          ('ha_dust_correction', np.float32),
                          ('hb_dust_correction', np.float32),
                          ('log_luminosity_o3', np.float32),
                          ('log_luminosity_o3_threshold', np.float32),
                          ('log_luminosity_o3_corr', np.float32),
                          ('log_luminosity_o3_corr_threshold', np.float32),
                          ('log_luminosity_ha', np.float32),
                          ('log_luminosity_ha_threshold', np.float32),
                          ('log_luminosity_ha_corr', np.float32),
                          ('log_luminosity_ha_corr_threshold', np.float32),
                          ('log_luminosity_hb', np.float32),
                          ('log_luminosity_hb_threshold', np.float32),
                          ('log_luminosity_hb_corr', np.float32),
                          ('log_luminosity_hb_corr_threshold', np.float32)])

    agn = np.zeros(len(done), dtype=agn_dtype)
    agn['plateifu'] = done['plateifu']
    agn['z'] = drpall['z']
    agn['isagn'][iagn] = True
    agn['good'] = good
    agn['detected'] = detected
    agn['p1'] = lines['p1']
    agn['p2'] = lines['p2']
    agn['p3'] = lines['p3']
    agn['p1_err'] = lines['p1_err']
    agn['p2_err'] = lines['p2_err']
    agn['p3_err'] = lines['p3_err']
    agn['o3'] = lines['o3']
    agn['o3_err'] = lines['o3_err']
    agn['n2ha'] = lines['n2ha']
    agn['s2ha'] = lines['s2ha']
    agn['o3hb'] = lines['o3hb']
    agn['hahb'] = lines['hahb']
    agn['n2ha_err'] = lines['n2ha_err']
    agn['s2ha_err'] = lines['s2ha_err']
    agn['o3hb_err'] = lines['o3hb_err']
    agn['hahb_err'] = lines['hahb_err']
    agn['hahb_av'] = lines['hahb_av']
    agn['o3_dust_correction'] = lines['o3_dust_correction']
    agn['ha_dust_correction'] = lines['ha_dust_correction']
    agn['hb_dust_correction'] = lines['hb_dust_correction']
    agn['log_luminosity_o3'] = - 9999.
    agn['log_luminosity_o3_threshold'] = - 9999.
    agn['log_luminosity_o3'][iagn] = log_agn_luminosity_o3
    agn['log_luminosity_o3_threshold'][ilimit] = log_agn_luminosity_o3_threshold[ilimit]
    agn['log_luminosity_o3_corr'] = - 9999.
    agn['log_luminosity_o3_corr_threshold'] = - 9999.
    agn['log_luminosity_o3_corr'][iagn] = log_agn_luminosity_o3_corr
    agn['log_luminosity_o3_corr_threshold'][ilimit] = log_agn_luminosity_o3_corr_threshold[ilimit]
    agn['log_luminosity_hb'] = - 9999.
    agn['log_luminosity_hb_threshold'] = - 9999.
    agn['log_luminosity_hb'][iagn] = log_agn_luminosity_hb
    agn['log_luminosity_hb_threshold'][ilimit] = log_agn_luminosity_hb_threshold[ilimit]
    agn['log_luminosity_hb_corr'] = - 9999.
    agn['log_luminosity_hb_corr_threshold'] = - 9999.
    agn['log_luminosity_hb_corr'][iagn] = log_agn_luminosity_hb_corr
    agn['log_luminosity_hb_corr_threshold'][ilimit] = log_agn_luminosity_hb_corr_threshold[ilimit]

    agnfile = os.path.join(os.getenv('MNSA_DATA'),
                           version + '.analysis', 'agn',
                           'jiyan' + altname, 'jiyan-agn-{v}.fits')
    if(dr17):
        agnfile = agnfile.replace('agn-', 'agn-dr17-')
    if(test is not None):
        agnfile = agnfile.replace('agn-', 'agn-{t}-'.format(t=test))
    agnfile = agnfile.format(v=version)
    hdr = []
    hdr.append({'name':'MNSA_CAT',
                'value':version,
                'comment':'mnsa catalog version'})
    hdr.append({'name':'P1_THRESHOLD',
                'value':p1_threshold,
                'comment':'P1 threshold used'})
    hdr.append({'name':'P3_THRESHOLD',
                'value':p3_threshold,
                'comment':'P3 threshold used'})
    hdr.append({'name':'NSIGMA_THRESHOLD',
                'value':nsigma,
                'comment':'nsigma threshold used'})
    for k in agn_ratios:
        hdr.append({'name':k,
                    'value':agn_ratios[k],
                    'comment':'parameter for canonical AGN'})
    fitsio.write(agnfile, agn, header=hdr, clobber=True)
