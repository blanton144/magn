#!/usr/bin/env python
# encoding: utf-8


import os
import sys
import subprocess
import argparse
import matplotlib.pyplot as plt
import matplotlib.patches
import matplotlib
import fitsio
import numpy as np
import mnsa
import magn
import magn.jiyan
import magn.agn
import mnsa.mnsautils

matplotlib.rcParams['font.size'] = 18
matplotlib.rcParams['figure.figsize'] = [12., 12.]
matplotlib.rcParams['text.usetex'] = True


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Select Ji and Yan-style AGN.')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.2',
                        help='MNSA configuration version')

    parser.add_argument('-o', '--old', dest='dr17',
                        required=False, help='dr17',
                        action='store_true',
                        default=False)

    args = parser.parse_args()
    version = args.version
    dr17 = args.dr17

    print("Reading data", flush=True)

    summary = fitsio.read(os.path.join(os.getenv('MNSA_DATA'),
                                       '{v}', 'mnsa-{v}.fits').format(v=version),
                          ext='SUMMARY')
    pipe3d = fitsio.read(os.path.join(os.getenv('MNSA_DATA'),
                                      '{v}', 'mnsa-{v}.fits').format(v=version),
                         ext='PIPE3D')

    agnfile = os.path.join(os.getenv('MNSA_DATA'),
                           version + '.analysis', 'agn',
                           'jiyan', 'jiyan-agn-{v}.fits')
    if(dr17):
        agnfile = agnfile.replace('agn-', 'agn-dr17-')
    agnfile = agnfile.format(v=version)
    agn = fitsio.read(agnfile)

    paramsfile = os.path.join(os.getenv('MNSA_DATA'),
                           version + '.analysis', 'agn',
                           'jiyan', 'jiyan-agn-params-{v}.fits')
    if(dr17):
        paramsfile = paramsfile.replace('agn-', 'agn-dr17-')
    paramsfile = paramsfile.format(v=version)
    params = fitsio.read(paramsfile, ext='PARAMS')
    mbhvs = fitsio.read(paramsfile, ext='MBH_VERSIONS')
    bolovs = fitsio.read(paramsfile, ext='BOLO_VERSIONS')

    good = (agn['good']) & (params['vdisp'] > 60.)
                
    log_sfr = pipe3d['log_SFR_ssp'][good]
    log_mass = pipe3d['log_Mass'][good]
    log_ssfr = log_sfr - log_mass
    log_vdisp = np.log10(params['vdisp'][good])
    log_hb_corr_threshold = agn['log_luminosity_hb_corr_threshold'][good]
    log_hb_corr = agn['log_luminosity_hb_corr'][good]
    log_o3_threshold = agn['log_luminosity_o3_threshold'][good]
    log_o3 = agn['log_luminosity_o3'][good]
    log_o3_corr_threshold = agn['log_luminosity_o3_corr_threshold'][good]
    log_o3_corr = agn['log_luminosity_o3_corr'][good]

    isagn = agn['isagn'][good]
    iagn = np.where(isagn == True)[0]
    ithreshold = np.where(isagn == False)[0]

    print("Median OIII (uncorrected) luminosity: {m:5.2f}".format(m=np.median(log_o3[iagn])))

    nabove = np.float32((log_o3_threshold[ithreshold] < np.median(log_o3[iagn])).sum())
    nall = np.float32(len(ithreshold))
    fabove = nabove / nall
    print("Fraction of OIII (uncorrected) thresholds below median: {m:5.2f}".format(m=fabove))
    nabove = np.float32((log_o3_threshold[ithreshold] < 39.6).sum())
    nall = np.float32(len(ithreshold))
    fabove = nabove / nall
    print("Fraction of OIII (uncorrected) thresholds below 39.6: {m:5.2f}".format(m=fabove))
    
    fig, ax = plt.subplots(2, 2)

    ylabel = r'$\log_{10} L({\rm ([O}{\textsc{III}}{\rm ]})$'

    ylim = [37., 43.]
    
    ax[0, 0].errorbar(log_mass[ithreshold],
                      log_o3_threshold[ithreshold],
                      yerr=np.ones(len(ithreshold)) * 0.3,
                      uplims=np.ones(len(ithreshold)),
                      xerr=0.04, linestyle='none', marker='.', markersize=1, alpha=0.15,
                      linewidth=1, color='black', zorder=1,
                      label=r'{\rm AGN Detection Thresholds}')
            
    ax[0, 0].scatter(log_mass[iagn],
                     log_o3[iagn],
                     alpha=1.0, color='red', s=40,
                     zorder=2, label=r'{\rm AGN Detections}')
    ax[0, 0].set_xlabel(r'$\log_{10} {\rm~Stellar~Mass~(}M_\odot{\rm )}$')
    ax[0, 0].set_ylabel(ylabel)
    
    ax[0, 0].set_xlim([8.9, 12.5])
    ax[0, 0].set_ylim(ylim)
    
    ax[0, 1].errorbar(log_vdisp[ithreshold],
                      log_o3_threshold[ithreshold],
                      yerr=np.ones(len(ithreshold)) * 0.3,
                      uplims=np.ones(len(ithreshold)),
                      xerr=0.04, linestyle='none', marker='.', markersize=1, alpha=0.15,
                      linewidth=1, color='black', zorder=1,
                      label=r'{\rm AGN Detection Thresholds}')
    
    ax[0, 1].scatter(log_vdisp[iagn],
                     log_o3[iagn],
                     alpha=1.0, color='red', s=40,
                     zorder=2, label=r'{\rm AGN Detections}')
    ax[0, 1].set_xlabel(r'$\log_{10} \sigma_v {\rm (km~s}^{-1}{\rm )}$')
    ax[0, 1].set_ylabel(ylabel)
    
    ax[0, 1].set_xlim([1.7, 2.8])
    ax[0, 1].set_ylim(ylim)
    
    ax[1, 0].errorbar(log_sfr[ithreshold],
                      log_o3_threshold[ithreshold],
                      yerr=np.ones(len(ithreshold)) * 0.3,
                      uplims=np.ones(len(ithreshold)),
                      xerr=0.04, linestyle='none', marker='.', markersize=1, alpha=0.15,
                      linewidth=1, color='black', zorder=1,
                      label=r'{\rm AGN Detection Thresholds}')
    
    ax[1, 0].scatter(log_sfr[iagn],
                     log_o3[iagn],
                     alpha=1.0, color='red', s=40,
                     zorder=2, label=r'{\rm AGN Detections}')
    ax[1, 0].set_xlabel(r'$\log_{10} {\rm~SFR~(}M_\odot{\rm ~yr}^{-1}{\rm )}$')
    ax[1, 0].set_ylabel(ylabel)
    
    ax[1, 0].set_xlim([-2., 1.9])
    ax[1, 0].set_ylim(ylim)
    
    ax[1, 1].errorbar(log_ssfr[ithreshold],
                      log_o3_threshold[ithreshold],
                      yerr=np.ones(len(ithreshold)) * 0.3,
                      uplims=np.ones(len(ithreshold)),
                      xerr=0.04, linestyle='none', marker='.', markersize=1, alpha=0.15,
                      linewidth=1, color='black', zorder=1,
                      label=r'{\rm AGN Detection Thresholds}')
    
    ax[1, 1].scatter(log_ssfr[iagn],
                     log_o3[iagn],
                     alpha=1.0, color='red', s=40,
                     zorder=2, label=r'{\rm AGN Detections}')
    ax[1, 1].set_xlabel(r'$\log_{10} {\rm~sSFR~(yr}^{-1}{\rm )}$')
    ax[1, 1].set_ylabel(ylabel)
    
    ax[1, 1].set_xlim([-13.8, -9.3])
    ax[1, 1].set_ylim(ylim)

    ax[1, 1].legend()
    
    plt.tight_layout()
    
    pngfile = os.path.join(os.getenv('MNSA_DATA'),
                           version + '.analysis', 'agn',
                           'jiyan', 'jiyan-thresholds-lo3-{v}.png')
    pngfile = pngfile.format(v=version)
    plt.savefig(pngfile, dpi=150)
    subprocess.run(['convert', pngfile, '-trim', pngfile])

