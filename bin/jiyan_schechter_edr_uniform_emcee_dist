#!/usr/bin/env python

import os
import sys
import argparse
import numpy as np
import magn.schechter_likelihood
import magn.defaults
import matplotlib
import matplotlib.pyplot as plt
import scipy.optimize
import emcee
import fitsio
import scipy.integrate


def cumul_D(model, actual):
    m = model / model.max()
    a = actual / actual.max()
    maxD = np.abs(m - a).max()
    return(maxD)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Plot emcee results')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.2',
                        help='MNSA configuration version')

    parser.add_argument('-m', '--mbh-version', dest='mbh_version',
                        type=str, default=magn.defaults.mbh_version,
                        help='version of black hole mass to use')

    parser.add_argument('-b', '--bolo-version', dest='bolo_version',
                        type=str, default=magn.defaults.bolo_version,
                        help='version of bolometric luminosity to use')

    parser.add_argument('-o', '--old', dest='dr17',
                        required=False, help='dr17',
                        action='store_true',
                        default=False)

    parser.add_argument('-t', '--test', dest='test',
                        type=str, default=None, required=False,
                        help='test name')

    args = parser.parse_args()
    version = args.version
    dr17 = args.dr17
    mbh_version = args.mbh_version
    bolo_version = args.bolo_version
    test = args.test

    agndir = os.path.join(os.getenv('MNSA_DATA'), version + '.analysis', 'agn', 'jiyan')
   
    filename = 'jiyan-schechter-emcee-edr-uniform-{m}-{b}-{v}.fits'.format(m=mbh_version,
                                                                           b=bolo_version,
                                                                           v=version)
    if(dr17):
        filename = filename.replace('jiyan-', 'jiyan-dr17-')
    if(test):
        filename = filename.replace('jiyan', 'jiyan-{t}'.format(t=test))
    infile = os.path.join(agndir, filename)
    
    offset = 0.0
    chain = fitsio.read(infile, ext='CHAIN')
    hdr = fitsio.read_header(infile, ext='CHAIN')
    log_lambda = fitsio.read(infile, ext='LOG_LAMBDA')
    log_lambda_threshold = fitsio.read(infile, ext='LOG_LAMBDA_THRESHOLD')
    properties = fitsio.read(infile, ext='PROPERTIES')
    properties_threshold = fitsio.read(infile, ext='PROPERTIES_THRESHOLD')
    alpha_0_range = fitsio.read(infile, ext='ALPHA_0_RANGE')
    log_lambda_star_range = fitsio.read(infile, ext='LOG_LAMBDA_STAR_RANGE')
    log_lambda_min_range = fitsio.read(infile, ext='LOG_LAMBDA_MIN_RANGE')

    nFagn = np.float32(hdr['NFAGN'])
    Fagn_lambda_c_min = np.float32(hdr['FAGN_LAMBDA_C_MIN'])
    Fagn_lambda_c_max = np.float32(hdr['FAGN_LAMBDA_C_MAX'])
    Fagn_lambda_cs = (Fagn_lambda_c_min + (Fagn_lambda_c_max - Fagn_lambda_c_min) *
                      np.arange(nFagn, dtype=np.float32) / np.float32(nFagn - 1))

    ipick = np.argmax(chain['loglike'])
    print(chain['loglike'].max())
    theta = np.array([chain['alpha'][ipick],
                      chain['log_lambda_star'][ipick] - offset,
                      chain['log_lambda_min'][ipick] - offset])

    nc = 1000
    lambdac = - 14.0 + 15. * np.arange(nc, dtype=np.float32) / np.float32(nc - 1) - offset
    Fagn = np.zeros(nc, dtype=np.float32)
    for i in np.arange(nc, dtype=np.int32):
        Fagn[i] = magn.schechter_likelihood.Fabove(alpha=theta[0], log_lambda_star=theta[1],
                                                   log_lambda_min=theta[2], log_lambda_c=lambdac[i])
    dFagn = np.append(Fagn[:-1] - Fagn[1:], [0.])

    dist = np.zeros(nc, dtype=np.float32)
    for i, llt in enumerate(log_lambda_threshold):
        ibigger = np.where(lambdac > llt)[0]
        dist[ibigger] = dist[ibigger] + dFagn[ibigger]

    factor = (len(log_lambda) + len(log_lambda_threshold)) / len(log_lambda_threshold)
    dist = dist * factor

    log_lambda_dist, log_lambda_edges = np.histogram(log_lambda, range=[-6., 1.],
                                                     bins=20)

    log_lambda_dist_model = np.zeros(len(log_lambda_dist), dtype=np.float32)
    for i in np.arange(len(log_lambda_dist)):
        ibin = np.where((lambdac > log_lambda_edges[i]) & (lambdac < log_lambda_edges[i + 1]))[0]
        log_lambda_dist_model[i] = dist[ibin].sum()

    log_lambda_dist_model_cumul = dist.cumsum()
    log_lambda_dist_model_cumul = log_lambda_dist_model_cumul / log_lambda_dist_model_cumul.max()
    
    log_lambda_dist_cumul = np.zeros(len(log_lambda_dist_model_cumul), dtype=np.float32)
    for i in np.arange(len(log_lambda_dist_cumul)):
        ilt = np.where(log_lambda < lambdac[i])[0]
        log_lambda_dist_cumul[i] = len(ilt)
    log_lambda_dist_cumul = log_lambda_dist_cumul / log_lambda_dist_cumul.max()

    lambdac_interp = scipy.interpolate.interp1d(log_lambda_dist_model_cumul, lambdac)

    ks_D = cumul_D(log_lambda_dist_model_cumul, log_lambda_dist_cumul)
    nran = 1000
    ks_D_ran = np.zeros(nran, dtype=np.float32)
    print(ks_D)
    for iran in np.arange(nran, dtype=np.int32):
        c = np.random.random(size=len(log_lambda))
        log_lambda_ran = lambdac_interp(c)
        log_lambda_dist_cumul_ran = np.zeros(len(log_lambda_dist_model_cumul), dtype=np.float32)
        for i in np.arange(len(log_lambda_dist_cumul)):
            ilt = np.where(log_lambda_ran < lambdac[i])[0]
            log_lambda_dist_cumul_ran[i] = len(ilt)
        ks_D_ran[iran] = cumul_D(log_lambda_dist_model_cumul, log_lambda_dist_cumul_ran)

    pks = np.float32(len(np.where(ks_D_ran > ks_D)[0])) / np.float32(nran)

    filename = 'jiyan-schechter-emcee-edr-uniform-dist-{m}-{b}-{v}.fits'.format(m=mbh_version,
                                                                                b=bolo_version,
                                                                                v=version)
    if(dr17):
        filename = filename.replace('jiyan-', 'jiyan-dr17-')
    if(test):
        filename = filename.replace('jiyan', 'jiyan-{t}'.format(t=test))
    outfile = os.path.join(agndir, filename)

    hdr = []
    hdr.append({'name':'PROBKS',
                'value': pks,
                'comment': 'K-S probability of observations under model'})
                        
    fitsio.write(outfile, log_lambda_edges + offset, header=hdr, clobber=True)
    fitsio.write(outfile, log_lambda_dist, clobber=False)
    fitsio.write(outfile, log_lambda_dist_model, clobber=False)
    fitsio.write(outfile, log_lambda_dist_cumul, clobber=False)
    fitsio.write(outfile, log_lambda_dist_model_cumul, clobber=False)
