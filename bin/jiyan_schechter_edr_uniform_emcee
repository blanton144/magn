#!/usr/bin/env python

import os
import sys
import argparse
import numpy as np
import magn.schechter_likelihood
import magn.defaults
import matplotlib.pyplot as plt
import scipy.optimize
import fitsio
import scipy.integrate


np.random.seed(102)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Fit Schechter to full Jiyan sample')

    parser.add_argument('-w', '--weights', dest='use_weights',
                        action='store_true', default=False,
                        help='use ESR weights')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.2',
                        help='MNSA configuration version')

    parser.add_argument('-m', '--mbh-version', dest='mbh_version',
                        type=str, default=magn.defaults.mbh_version,
                        help='version of black hole mass to use')

    parser.add_argument('-b', '--bolo-version', dest='bolo_version',
                        type=str, default=magn.defaults.bolo_version,
                        help='version of bolometric luminosity to use')

    parser.add_argument('-o', '--old', dest='dr17',
                        required=False, help='dr17',
                        action='store_true',
                        default=False)

    parser.add_argument('-t', '--test', dest='test',
                        type=str, default=None, required=False,
                        help='test name')

    args = parser.parse_args()
    version = args.version
    dr17 = args.dr17
    test = args.test
    use_weights = args.use_weights
    mbh_version = args.mbh_version
    bolo_version = args.bolo_version

    summary = fitsio.read(os.path.join(os.getenv('MNSA_DATA'),
                                       '{v}', 'mnsa-{v}.fits').format(v=version),
                          ext='SUMMARY')

    pipe3d = fitsio.read(os.path.join(os.getenv('MNSA_DATA'),
                                      '{v}', 'mnsa-{v}.fits').format(v=version),
                         ext='PIPE3D')

    
    agndir = os.path.join(os.getenv('MNSA_DATA'), version + '.analysis', 'agn', 'jiyan')
    agnfile = os.path.join(agndir, 'jiyan-agn-{v}.fits')
    if(dr17):
        agnfile = agnfile.replace('agn-', 'agn-dr17-')
    if(test):
        agnfile = agnfile.replace('agn-', 'agn-{t}-'.format(t=test))
    agnfile = agnfile.format(v=version)
    agn = fitsio.read(agnfile)

    paramsfile = os.path.join(os.getenv('MNSA_DATA'),
                           version + '.analysis', 'agn',
                           'jiyan', 'jiyan-agn-params-{v}.fits')
    if(dr17):
        paramsfile = paramsfile.replace('agn-', 'agn-dr17-')
    if(test):
        paramsfile = paramsfile.replace('agn-', 'agn-{t}-'.format(t=test))
    paramsfile = paramsfile.format(v=version)
    params = fitsio.read(paramsfile, ext='PARAMS')
    mbhvs = fitsio.read(paramsfile, ext='MBH_VERSIONS')
    bolovs = fitsio.read(paramsfile, ext='BOLO_VERSIONS')

    good = ((agn['good'] > 0) & (params['vdisp'] > magn.defaults.vdisp_low))
    isagn = (agn['isagn'] > 0)
    mainbits = (2**10 | 2**11 | 2**12)
    ismain = (((summary['mngtarg1'] & mainbits) != 0) &
              (summary['esrweight'] > 0.))

    imbh = np.where(mbhvs['mbh_version'] == mbh_version)[0]
    ibolo = np.where(bolovs['bolo_version'] == bolo_version)[0]

    if(use_weights):
        esrweights_all = summary['esrweight']
    else:
        esrweights_all = np.ones(len(summary), dtype=np.float32)

    iagn = np.where(good & isagn & ismain)[0]
    ithreshold = np.where(good & (isagn == False) & ismain)[0]

    nagn = len(iagn)
    nthreshold = len(ithreshold)

    log_mbh = params['logmbh'][iagn, imbh]
    log_mbh_threshold = params['logmbh'][ithreshold, imbh]

    log_ledd = params['logledd'][iagn, imbh]
    log_ledd_threshold = params['logledd'][ithreshold, imbh]
    
    log_bolo = params['logbolo'][iagn, ibolo]
    log_bolo_threshold = params['logbolo_threshold'][ithreshold, ibolo]

    log_lambdas = log_bolo - log_ledd
    log_lambdas_threshold = log_bolo_threshold - log_ledd_threshold

    weights = esrweights_all[iagn]
    weights_threshold = esrweights_all[ithreshold]

    properties = np.ones(nagn, dtype=np.float32)
    properties_threshold = np.ones(nthreshold, dtype=np.float32)

    Fagn_lambda_c_range = [-4., 0.]
    nFagn = 21

    # Prior range definition
    alpha_0_range = np.array([-1.9, 2.4])
    log_lambda_min_range = np.array([-15., -7.8])
    log_lambda_star_range = np.array([-2., 1.0])
    log_lambda_max = log_lambda_star_range[1]

    chain = magn.schechter_likelihood.schechter_emcee(name='lambda', 
                                                      log_lambdas=log_lambdas,
                                                      log_lambda_threshold=log_lambdas_threshold,
                                                      properties=properties,
                                                      properties_threshold=properties_threshold,
                                                      weights=weights,
                                                      weights_threshold=weights_threshold,
                                                      alpha_0_range=alpha_0_range,
                                                      log_lambda_star_range=log_lambda_star_range,
                                                      log_lambda_min_range=log_lambda_min_range,
                                                      Fagn_lambda_c_range=Fagn_lambda_c_range,
                                                      nFagn=nFagn,
                                                      offset=0.)
    
    filename = 'jiyan-schechter-emcee-edr-uniform-{m}-{b}-{v}.fits'.format(m=mbh_version,
                                                                           b=bolo_version,
                                                                           v=version)
    if(dr17):
        filename = filename.replace('jiyan-', 'jiyan-dr17-')
    if(test):
        filename = filename.replace('jiyan-', 'jiyan-{t}-'.format(t=test))
    outfile = os.path.join(agndir, filename)

    hdr = []
    hdr.append({'name': 'NFAGN',
                'value': nFagn,
                'comment': 'size of Fagn array'})
    hdr.append({'name': 'FAGN_LAMBDA_C_MIN',
                'value': Fagn_lambda_c_range[0],
                'comment': 'minimum lambdainosity threshold'})
    hdr.append({'name': 'FAGN_LAMBDA_C_MAX',
                'value': Fagn_lambda_c_range[1],
                'comment': 'maximum lambda threshold'})
    fitsio.write(outfile, chain, header=hdr, extname='CHAIN', clobber=True)
    fitsio.write(outfile, log_lambdas, extname='LOG_LAMBDA', clobber=False)
    fitsio.write(outfile, log_lambdas_threshold, extname='LOG_LAMBDA_THRESHOLD', clobber=False)
    fitsio.write(outfile, properties, extname='PROPERTIES', clobber=False)
    fitsio.write(outfile, properties_threshold, extname='PROPERTIES_THRESHOLD', clobber=False)
    fitsio.write(outfile, weights, extname='WEIGHTS', clobber=False)
    fitsio.write(outfile, weights_threshold, extname='WEIGHTS_THRESHOLD', clobber=False)
    fitsio.write(outfile, alpha_0_range, extname='ALPHA_0_RANGE', clobber=False)
    fitsio.write(outfile, log_lambda_star_range, extname='LOG_LAMBDA_STAR_RANGE', clobber=False)
    fitsio.write(outfile, log_lambda_min_range, extname='LOG_LAMBDA_MIN_RANGE', clobber=False)
