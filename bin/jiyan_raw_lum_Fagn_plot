#!/usr/bin/env python

import os
import sys
import subprocess
import argparse
import numpy as np
import magn.schechter_likelihood
import matplotlib
import matplotlib.pyplot as plt
import scipy.optimize
import emcee
import fitsio
import scipy.integrate


matplotlib.rcParams['figure.figsize'] = [12., 8]
matplotlib.rcParams['font.size'] = 20
matplotlib.rcParams['text.usetex'] = True


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Plot emcee results')

    parser.add_argument('-w', '--weights', dest='use_weights',
                        action='store_true', default=False,
                        help='use ESR weights')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.2',
                        help='MNSA configuration version')

    parser.add_argument('-l', '--luminosity-version', dest='luminosity_version',
                        type=str, default='hb_corr',
                        help='version of luminosity to use')

    parser.add_argument('-o', '--old', dest='dr17',
                        required=False, help='dr17',
                        action='store_true',
                        default=False)

    parser.add_argument('-t', '--test', dest='test',
                        required=False, help='test',
                        action='store_true',
                        default=False)

    parser.add_argument('-m', '--mass-bins', dest='mass_binlist',
                        type=str, default='9.25,10.25,10.75,11.25,11.75',
                        help='mass bin edges')

    parser.add_argument('-s', '--ssfr-bins', dest='ssfr_binlist',
                        type=str, default='-16.5,-13.0,-11.0,-9.5',
                        help='ssfr bin edges')

    args = parser.parse_args()
    version = args.version
    dr17 = args.dr17
    use_weights = args.use_weights
    luminosity_version = args.luminosity_version
    test = args.test
    mass_binlist = args.mass_binlist
    ssfr_binlist = args.ssfr_binlist

    ssfr_bin_edges = np.array(ssfr_binlist.split(','), dtype=np.float32)
    ssfr_nbins = len(ssfr_bin_edges) - 1
    ssfr_bin_centers = 0.5 * (ssfr_bin_edges[:-1] + ssfr_bin_edges[1:])

    mass_bin_edges = np.array(mass_binlist.split(','), dtype=np.float32)
    mass_nbins = len(mass_bin_edges) - 1
    mass_bin_centers = 0.5 * (mass_bin_edges[:-1] + mass_bin_edges[1:])

    summary = fitsio.read(os.path.join(os.getenv('MNSA_DATA'),
                                       '{v}', 'mnsa-{v}.fits').format(v=version),
                          ext='SUMMARY')

    pipe3d = fitsio.read(os.path.join(os.getenv('MNSA_DATA'),
                                      '{v}', 'mnsa-{v}.fits').format(v=version),
                         ext='PIPE3D')
    log_ssfr = pipe3d['log_SFR_D_C'] - pipe3d['log_Mass']
    log_mass = pipe3d['log_Mass']

    agndir = os.path.join(os.getenv('MNSA_DATA'), version + '.analysis', 'agn', 'jiyan')
    agnfile = os.path.join(agndir, 'jiyan-agn-{v}.fits')
    if(dr17):
        agnfile = agnfile.replace('agn-', 'agn-dr17-')
    if(test):
        agnfile = agnfile.replace('agn-', 'agn-test-')
    agnfile = agnfile.format(v=version)
    agn = fitsio.read(agnfile)

    good = (agn['good'] > 0)
    isagn = (agn['isagn'] > 0)
    mainbits = (2**10 | 2**11 | 2**12)
    ismain = (((summary['mngtarg1'] & mainbits) != 0) &
              (summary['esrweight'] > 0.))

    log_lum_all = agn['log_luminosity_{v}'.format(v=luminosity_version)]

    if(use_weights):
        esrweights_all = summary['esrweight']
    else:
        esrweights_all = np.ones(len(summary), dtype=np.float32)

    fig, ax = plt.subplots()

    colors = ['red', 'grey', 'blue']
    for rissfr in np.arange(len(ssfr_bin_centers), dtype=np.int32):
        issfr = len(ssfr_bin_centers) - 1 - rissfr
        for imass in np.arange(len(mass_bin_centers), dtype=np.int32):
            allinbin = ((good) & (ismain) &
                        (log_mass > mass_bin_edges[imass]) &
                        (log_mass <= mass_bin_edges[imass + 1]) &
                        (log_ssfr > ssfr_bin_edges[issfr]) &
                        (log_ssfr <= ssfr_bin_edges[issfr + 1]))

            agninbin = ((good) & (isagn) & (ismain) & (log_lum_all > 39.0) &
                        (log_mass > mass_bin_edges[imass]) &
                        (log_mass <= mass_bin_edges[imass + 1]) &
                        (log_ssfr > ssfr_bin_edges[issfr]) &
                        (log_ssfr <= ssfr_bin_edges[issfr + 1]))

            Fagninbin = esrweights_all[agninbin].sum() / esrweights_all[allinbin].sum()
            Fagnstdinbin = np.sqrt(agninbin.sum()) / allinbin.sum()
            
            if(imass == 0):
                if(issfr == 0):
                    label = r'${\rm log}_{10}({\rm sSFR} / {\rm yr}^{-1}) < - 13$'
                if(issfr == 1):
                    label = r'$-13 < {\rm log}_{10}({\rm sSFR} / {\rm yr}^{-1}) < - 11$'
                if(issfr == 2):
                    label = r'${\rm log}_{10}({\rm sSFR} / {\rm yr}^{-1}) > -11$'
            else:
                label = None
            ax.fill_between([mass_bin_edges[imass] + 0.02, mass_bin_edges[imass + 1] - 0.02],
                            [np.log10(Fagninbin - Fagnstdinbin),
                             np.log10(Fagninbin - Fagnstdinbin)],
                            [np.log10(Fagninbin + Fagnstdinbin),
                             np.log10(Fagninbin + Fagnstdinbin)],
                            color=colors[issfr], alpha=0.6, label=label)

    ax.set_ylim([-3.3, 0.15])
    ax.set_xlabel(r'${\rm log}_{10} M_\ast {\rm (}M_\odot{\rm )}$')
    ax.set_ylabel(r'${\rm log}_{10} f_{\rm AGN}(L_{{\rm H}\beta, {\rm corr}} > 10^{39}~{\rm erg}~{\rm s}^{-1})$')
    ax.legend(loc='upper left')
        
    pngname = 'jiyan-raw-lum-mssfr-{l}-Fagn-{v}.png'.format(l=luminosity_version,
                                                            v=version)
    if(test):
        pngname = pngname.replace('jiyan-raw', 'jiyan-test-raw')
    plt.savefig(os.path.join(agndir, pngname), dpi=300)
    plt.close()

    subprocess.run(['convert',
                    os.path.join(agndir, pngname),
                    '-trim',
                    os.path.join(agndir, pngname)])
