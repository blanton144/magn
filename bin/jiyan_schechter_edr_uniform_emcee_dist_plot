#!/usr/bin/env python

import os
import sys
import argparse
import subprocess
import numpy as np
import magn.schechter_likelihood
import magn.defaults
import matplotlib
import matplotlib.pyplot as plt
import scipy.optimize
import emcee
import fitsio
import scipy.integrate


matplotlib.rcParams['figure.figsize'] = [8., 8]
matplotlib.rcParams['font.size'] = 28
matplotlib.rcParams['text.usetex'] = True


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Plot emcee results')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.2',
                        help='MNSA configuration version')

    parser.add_argument('-M', '--mbh-version', dest='mbh_version',
                        type=str, default=magn.defaults.mbh_version,
                        help='version of black hole mass to use')

    parser.add_argument('-b', '--bolo-version', dest='bolo_version',
                        type=str, default=magn.defaults.bolo_version,
                        help='version of bolometric luminosity to use')

    parser.add_argument('-o', '--old', dest='dr17',
                        required=False, help='dr17',
                        action='store_true',
                        default=False)

    parser.add_argument('-t', '--test', dest='test',
                        type=str, default=None, required=False,
                        help='test name')

    args = parser.parse_args()
    version = args.version
    dr17 = args.dr17
    mbh_version = args.mbh_version
    bolo_version = args.bolo_version
    test = args.test

    agndir = os.path.join(os.getenv('MNSA_DATA'), version + '.analysis', 'agn', 'jiyan')
   
    filename = 'jiyan-schechter-emcee-edr-uniform-dist-{m}-{b}-{v}.fits'.format(m=mbh_version,
                                                                                b=bolo_version,
                                                                                v=version)
    if(dr17):
        filename = filename.replace('jiyan-', 'jiyan-dr17-')
    if(test):
        filename = filename.replace('jiyan', 'jiyan-{t}'.format(t=test))
    infile = os.path.join(agndir, filename)

    hdr = fitsio.read_header(infile)
    probks = np.float32(hdr['PROBKS'])
    
    log_lambda_edges = fitsio.read(infile, ext=0)
    log_lambda_dist = fitsio.read(infile, ext=1)
    log_lambda_dist_model = fitsio.read(infile, ext=2)
    log_lambda_dist_cumul = fitsio.read(infile, ext=3)
    log_lambda_dist_model_cumul = fitsio.read(infile, ext=4)
                        
    log_lambda_mid = 0.5 * (log_lambda_edges[:-1] + log_lambda_edges[1:])

    fig, ax = plt.subplots()

    ax.step(log_lambda_mid, log_lambda_dist, color='black', linewidth=2,
            label=r'{\rm Observed}')
    ax.step(log_lambda_mid, log_lambda_dist_model, color='red', linewidth=2,
            label=r'{\rm Model}')

    ax.set_xlabel(r'${\rm log}_{10} (L_{\rm c} / {\rm ~erg~s}^{-1})$')
    ax.set_ylabel(r'$N_{\rm bin}$')

    ax.legend()

    pngname = 'jiyan-schechter-emcee-edr-uniform-dist-{m}-{b}-{v}.png'.format(m=mbh_version,
                                                                              b=bolo_version,
                                                                              v=version)
    if(dr17):
        pngname = pngname.replace('jiyan-', 'jiyan-dr17-')
    if(test):
        pngname = pngname.replace('jiyan', 'jiyan-{t}'.format(t=test))
    plt.savefig(os.path.join(agndir, pngname), dpi=300)
    plt.close()

    subprocess.run(['convert', pngname, '-trim', pngname])
