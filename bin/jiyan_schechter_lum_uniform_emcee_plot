#!/usr/bin/env python

import os
import sys
import argparse
import subprocess
import numpy as np
import magn.schechter_likelihood
import magn.defaults
import matplotlib
import matplotlib.pyplot as plt
import scipy.optimize
import emcee
import fitsio
import scipy.integrate


matplotlib.rcParams['figure.figsize'] = [10., 8]
matplotlib.rcParams['font.size'] = 28
matplotlib.rcParams['text.usetex'] = True


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Plot emcee results')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.2',
                        help='MNSA configuration version')

    parser.add_argument('-l', '--luminosity-version', dest='luminosity_version',
                        type=str, default=magn.defaults.luminosity_version,
                        help='version of luminosity to use')

    parser.add_argument('-o', '--old', dest='dr17',
                        required=False, help='dr17',
                        action='store_true',
                        default=False)

    parser.add_argument('-t', '--test', dest='test',
                        type=str, default=None, required=False,
                        help='test name')

    
    args = parser.parse_args()
    version = args.version
    dr17 = args.dr17
    test = args.test
    luminosity_version = args.luminosity_version

    agndir = os.path.join(os.getenv('MNSA_DATA'), version + '.analysis', 'agn', 'jiyan')

   
    filename = 'jiyan-schechter-emcee-lum-uniform-{l}-{v}.fits'.format(l=luminosity_version,
                                                                       v=version)
    if(dr17):
        filename = filename.replace('jiyan-', 'jiyan-dr17-')
    if(test):
        filename = filename.replace('jiyan-', 'jiyan-{t}-'.format(t=test))
    infile = os.path.join(agndir, filename)
    
    chain = fitsio.read(infile)
    hdr = fitsio.read_header(infile, ext=1)

    nFagn = np.float32(hdr['NFAGN'])
    Fagn_lum_c_min = np.float32(hdr['FAGN_LUM_C_MIN'])
    Fagn_lum_c_max = np.float32(hdr['FAGN_LUM_C_MAX'])
    Fagn_lum_cs = (Fagn_lum_c_min + (Fagn_lum_c_max - Fagn_lum_c_min) *
                   np.arange(nFagn, dtype=np.float32) / np.float32(nFagn - 1))

    i39 = np.argmin(np.abs(Fagn_lum_cs - magn.defaults.Fagn_loglum_threshold))
    print(Fagn_lum_cs[i39])

    fig, axs = plt.subplots(4, 4,
                            gridspec_kw={'hspace':0,
                                         'wspace':0})

    pts = np.zeros((len(chain), 4), dtype=np.float32)
    pts[:, 0] = chain['alpha']
    pts[:, 1] = chain['log_lum_min']
    pts[:, 2] = chain['log_lum_star']
    pts[:, 3] = np.log10(chain['Fagn'][:, i39])

    labels = [r'$\alpha$',
              r'${\rm log}_{10} L_{\rm min}$',
              r'${\rm log}_{10} L_{\ast}$',
              r'$F_{\rm AGN, ' + str(int(magn.defaults.Fagn_loglum_threshold)) + r'}$']

    limits = np.array([[1.21, 1.55],
                       [34.3, 37.1],
                       [41.3, 43.2],
                       [-1.61, -1.14]])

    ngrid = 30

    for i in np.arange(4):
        for j in np.arange(4):
            ip = 3 - i
            jp = j
            hrange = limits[[jp, ip], :]
            if(jp < ip):
                greyscale_linear, xe, ye = np.histogram2d(pts[:, jp], pts[:, ip],
                                                          bins=ngrid,
                                                          range=hrange)
                greyscale_asinh = np.arcsinh(greyscale_linear)
                im = axs[i, j].imshow(greyscale_asinh.T, cmap='Greys', origin='lower',
                                      aspect='auto', extent=hrange.flatten())
                if(i == 0):
                    axs[i, j].set_xlabel(labels[jp])
                    axs[i, j].xaxis.set_label_position('top') 
                    axs[i, j].tick_params(top=True, labeltop=True, bottom=False, labelbottom=False)
                else:
                    axs[i, j].tick_params(top=False, labeltop=False, bottom=False, labelbottom=False)
                if(j == 0):
                    axs[i, j].set_ylabel(labels[ip])
                else:
                    axs[i, j].tick_params(left=False, labelleft=False, right=False, labelright=False)
            elif(jp > ip):
                axs[i, j].axis('off')
            else:
                dist, xe = np.histogram(pts[:, ip], bins=ngrid, range=hrange[0, :])
                xm = 0.5 * (xe[:-1] + xe[1:])
                axs[i, j].plot(hrange[0, :], [0., 0.], linewidth=2, color='grey')
                axs[i, j].step(xm, dist, where='mid', color='black')
                axs[i, j].tick_params(left=False, labelleft=False, right=False, labelright=False)
                axs[i, j].set_xlabel(labels[jp])
                axs[i, j].xaxis.set_label_position('bottom') 

    pngname = 'jiyan-schechter-emcee-lum-uniform-{l}-{v}.png'.format(l=luminosity_version,
                                                                     v=version)
    if(dr17):
        pngname = pngname.replace('jiyan-', 'jiyan-dr17-')
    if(test):
        pngname = pngname.replace('jiyan-', 'jiyan-{t}-'.format(t=test))
    plt.tight_layout()
    plt.savefig(os.path.join(agndir, pngname), dpi=300)
    plt.close()

    subprocess.run(['convert', os.path.join(agndir, pngname), '-trim',
                    os.path.join(agndir, pngname)])

    indx = np.arange(len(chain), dtype=np.int32)
    np.random.shuffle(indx)
    indx = indx[0:100]

    fig, ax = plt.subplots()

    log_Fagn_mean = np.nanmean(np.log10(chain['Fagn']), axis=0)
    log_Fagn_std = np.nanstd(np.log10(chain['Fagn']), axis=0)

    for i in indx:
        ax.fill_between(Fagn_lum_cs, log_Fagn_mean - log_Fagn_std,
                        log_Fagn_mean + log_Fagn_std, color='pink')
        ax.plot(Fagn_lum_cs, np.log10(chain['Fagn'][i, :]),
                linewidth=2, alpha=0.05, color='black')
        ax.plot(Fagn_lum_cs, log_Fagn_mean, linewidth=4, color='red')

    ax.set_ylim([-4.1, 0.1])
    ax.set_xlabel(r'${\rm log}_{10} (L_{\rm c} / {\rm ~erg~s}^{-1})$')
    ax.set_ylabel(r'${\rm log}_{10} F_{\rm AGN}(L > L_{\rm c})$')
    
    pngname = 'jiyan-schechter-emcee-lum-uniform-Fagn-{l}-{v}.png'.format(l=luminosity_version,
                                                                          v=version)
    if(dr17):
        pngname = pngname.replace('jiyan-', 'jiyan-dr17-')
    if(test):
        pngname = pngname.replace('jiyan-', 'jiyan-{t}-'.format(t=test))
    plt.tight_layout()
    plt.savefig(os.path.join(agndir, pngname), dpi=300)
    plt.close()

    subprocess.run(['convert', os.path.join(agndir, pngname), '-trim',
                    os.path.join(agndir, pngname)])

