#!/usr/bin/env python

import os
import sys
import argparse
import numpy as np
import matplotlib.pyplot as plt
import fitsio


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Fit Schechter to full Jiyan sample')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.2',
                        help='MNSA configuration version')

    parser.add_argument('-o', '--old', dest='dr17',
                        required=False, help='dr17',
                        action='store_true',
                        default=False)

    
    args = parser.parse_args()
    version = args.version
    dr17 = args.dr17

    paramsfile = os.path.join(os.getenv('MNSA_DATA'),
                           version + '.analysis', 'agn',
                           'jiyan', 'jiyan-agn-params-{v}.fits')
    if(dr17):
        paramsfile = paramsfile.replace('agn-', 'agn-dr17-')
    paramsfile = paramsfile.format(v=version)
    mbhvs = fitsio.read(paramsfile, ext='MBH_VERSIONS')
    bolovs = fitsio.read(paramsfile, ext='BOLO_VERSIONS')

    cf = dict()
    for imbh, mbhv in enumerate(mbhvs['mbh_version']):
        for ibolo, bolov in enumerate(bolovs['bolo_version']):
            filename = 'jiyan-schechter-emcee-{m}-{b}-{v}.fits'.format(m=mbhv, b=bolov, v=version)
            chain = fitsio.read(filename)
            cf[mbhv, bolov] = dict()
            cf[mbhv, bolov]['log_lambda_c'] = np.array([-3.5, -3.0, -2.5, -2.0], dtype=np.float32)
            cf[mbhv, bolov]['log_Fagn'] = np.zeros(4, dtype=np.float32)
            cf[mbhv, bolov]['log_Fagn_err'] = np.zeros(4, dtype=np.float32)
            cf[mbhv, bolov]['log_Fagn'][0] = np.log10(chain['Fagn_3_5']).mean()
            cf[mbhv, bolov]['log_Fagn_err'][0] = np.log10(chain['Fagn_3_5']).std()
            cf[mbhv, bolov]['log_Fagn'][1] = np.log10(chain['Fagn_3_0']).mean()
            cf[mbhv, bolov]['log_Fagn_err'][1] = np.log10(chain['Fagn_3_0']).std()
            cf[mbhv, bolov]['log_Fagn'][2] = np.log10(chain['Fagn_2_5']).mean()
            cf[mbhv, bolov]['log_Fagn_err'][2] = np.log10(chain['Fagn_2_5']).std()
            cf[mbhv, bolov]['log_Fagn'][3] = np.log10(chain['Fagn_2_0']).mean()
            cf[mbhv, bolov]['log_Fagn_err'][3] = np.log10(chain['Fagn_2_0']).std()

    fig, ax = plt.subplots()
    
    colors = ['red', 'green', 'blue', 'black']
    for imbh, mbhv in enumerate(mbhvs['mbh_version']):
        for ibolo, bolov in enumerate(bolovs['bolo_version']):
            ccf = cf[mbhv, bolov]
            color = colors[ibolo]
            ax.plot(ccf['log_lambda_c'], ccf['log_Fagn'], linewidth=2 + imbh, color=color,
                    label='{a} {b}'.format(a=mbhv, b=bolov))
            ax.errorbar(ccf['log_lambda_c'], ccf['log_Fagn'], ccf['log_Fagn_err'], color=color)

    ax.legend(fontsize=6)
    ax.set_ylabel(r'log$_{10} F_{\rm AGN}(\lambda >\lambda_c)$')
    ax.set_xlabel(r'log$_{10} \lambda_c$')
    ax.set_xlim([-3.8, -1.])

    plt.savefig('Fagn.png', dpi=300)
